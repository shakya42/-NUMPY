                                                        MODULE: 8 - WORKING WITH NUMPY (PYTHON)



# 1. Creating a (3*) identity matrix with float data type.

import numpy as np
x = np.identity(3, dtype=float)
print(x)


# 2. Create a 1D Array with Random Values between 0 and 1.
import numpy as np
x = np.random.rand(5)
print(x)

# 3. Create a 2D Array with Random Integer Values:
import numpy as np
x = np.random.randint(10, 50, (3, 4))
print(x)

# 4. Creating an Array Using a Custom Function:
import numpy as np
def create_array(x, y):
    return x * y

shape = (3, 3)
new_array = np.fromfunction(lambda i, j: create_array(i, j), shape, dtype=int)
print(new_array)

# 5 .Reshaping a 1D Array into a 2D Array:
import numpy as np
x = np.array([5, 10, 15, 20, 25, 30, 35, 40, 45]).reshape(3, 3)
print(x)

# 6. Creating a 3*3 Array of Ones:
import numpy as np
x = np.ones((3, 3), dtype=int)
print(x)

# 7. Getting the common items between two numpy arrays:
import numpy as np
a = np.array([1, 2, 3, 2, 3, 4, 3, 4, 5, 6])
b = np.array([7, 3, 10, 3, 7, 4, 9, 4, 9, 8])
common_elements = np.intersect1d(a, b)
print(common_elements)

# 8. Removing all items present in array b from array a:
import numpy as np
a = np.array([1, 2, 3, 4, 5])
b = np.array([2, 4, 6, 8])
result = np.setdiff1d(a, b)
print(result)

# 9. Limit the number of items printed in numpy array a to a maximum of 6 elements:
import numpy as np
x = np.arange(20)
np.set_printoptions(threshold=6)
print(x)

# 10. Drop all nan values from a 1D numpy array:
import numpy as np
x = np.array([1, 2, 3, np.nan, 5, 6, 7, np.nan])
print(x[~np.isnan(x)])

# 11. Create a 1D NumPy array of the first 20 natural numbers and a 2D NumPy array of shape (4, 5) with values ranging from 1 to 20.
import numpy as np
x = np.arange(1, 21)
print(x)
y = x.reshape(4, 5)
print(y)

# 12. Given a 3D numpy array of shape (2, 3, 4), find its shape, size, number of dimensions, and data type, then change its data type to float64
# and verify the change:
import numpy as np
x = np.array(
    [[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]],
     [[13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24]]]
)
print(x.shape)
print(x.size)
print(x.ndim)
print(x.dtype)
x = x.astype(float)
print(x.dtype)

# 13. Reshape a 1D array of 12 elements into a 3*4 2D array and then flatten it back into a 1D array using ravel():
import numpy as np
x = np.arange(2, 26, 2).reshape(3, 4)
y = np.ravel(x)
print(y)

# 14. 14. Given two arrays, a = np. array ([1, 2, 3]) and b = np. array ([4, 5, 6]), perform element-wise addition, subtraction,multiplication, and 
# division. Explain the behavior when dividing by zero.
import numpy as np

a = np.array([1, 2, 3])
b = np.array([4, 5, 6])

addition = a + b
print("Addition:")
print(addition)

subtraction = a - b
print("Subtraction:")
print(subtraction)

multiplication = a * b
print("Multiplication:")
print(multiplication)

division = a / b
print("Division:")
print(division)

a = np.array([-1, 0, 2])
b = np.array([0, 0, 1])
division_by_zero = a / b
print("Division by zero:")
print(division_by_zero)

# 15. Create a 2D array of shape (3, 1) and a 1D array of length 3. Perform element-wise addition using broadcasting.
# Explain how broadcasting rules apply in this scenario.
import numpy as np
x = np.random.randint(1, 50, (3, 1))
y = np.arange(3)

print("2D array (x):")
print(x)
print("\n1D array (y):")
print(y)

z = x + y
print("\nBroadcasted addition result (z):")
print(z)

# 16. Generate a random 2D array of integers between 0 and 10. Use conditional operators to create a Boolean mask identifying elements greater than 
# 5. Replace all elements greater than 5 with the value 5.
import numpy as np

x = np.random.randint(0, 11, (3, 5))
print("Original array:")
print(x)

mask = x > 5
print("\nBoolean mask (elements greater than 5):")
print(mask)

x[mask] = 5
print("\nModified array:")
print(x)

# 17. Given a 4*4 array of random integers, use indexing and slicing to extract:
# o The entire second row 
# o The last column 
# o The subarray consisting of the first two rows and first two column
x = np.random.randint(1,50,(4,4))
print(x)
print(x[1])
print(x[ :,3])
print(x[:2,:2])

# 18. Question: Describe a practical example where NumPy can be used in EDA, AI, ML, and DL, and implement a NumPy solution for a simple task in each 
# area. 
# example of EDA
x = np.array([1,2,3,4,11,2,11,22,33,44,1,56,778])
mean = np.mean(x)
median = np.median(x)
std_dev = np.std(x)
variance = np.var(x)
print(f' the mean is : {mean}','\n',f'the median is : {median}','\n',f'the standard deviation is : {std_dev}','\n',f'the variance is :{variance}')


# Example of AI
x = np.array([1,2,3,4,11,2,11,22,33,44,1,56,778])
max_value = np.max(x)
min_value = np.min(x)
result = (x - min_value)/(max_value - min_value)
print(f'Normalized features is : {result}')


# Example of DL
a = np.array([-1,0,1,2,3,-4,5])
def relu(x):
    return np.maximum(0,x)
output = relu(a)
print(output)

# 19. Create a random 4*4 matrix and use NumPy to compute its eigenvalues and eigenvectors. Verify the eigenvalues by reconstructing the matrix.
import numpy as np
matrix = np.random.randint(1, 10, (4, 4))
print("Original Matrix:")
print(matrix)

eigenvalues, eigenvectors = np.linalg.eig(matrix)
print("\nEigenvalues:")
print(eigenvalues)
print("\nEigenvectors:")
print(eigenvectors)

reconstructed_matrix = eigenvectors @ np.diag(eigenvalues) @ np.linalg.inv(eigenvectors)
print("\nReconstructed Matrix (using eigenvalues and eigenvectors):")
print(reconstructed_matrix)

# 20.  Create a 1D array of 27 elements and reshape it into a 3x3x3 3D array. Flatten it back into a 1D array and compare the flattened array 
# with the original.
import numpy as np
original_array = np.arange(1, 28)
print("Original 1D array:")
print(original_array)

reshaped_array = original_array.reshape(3, 3, 3)
print("\nReshaped 3D array:")
print(reshaped_array)

flattened_array = reshaped_array.ravel()
print("\nFlattened 1D array:")
print(flattened_array)

comparison = np.array_equal(original_array, flattened_array)
print("\nComparison result:")
print(comparison

# 21.Perform matrix multiplication of two 2D arrays using np.dot () and @. Compare the results and performance of both methods using a large dataset.
import numpy as np
import time

A = np.random.rand(1000, 1000)
B = np.random.rand(1000, 1000)

start_time_dot = time.time()
result_dot = np.dot(A, B)
end_time_dot = time.time()
time_dot = end_time_dot - start_time_dot
print(f"Time taken by np.dot(): {time_dot:.6f} seconds")

start_time_at = time.time()
result_at = A @ B
end_time_at = time.time()
time_at = end_time_at - start_time_at
print(f"Time taken by @ operator: {time_at:.6f} seconds")

comparison = np.allclose(result_dot, result_at)
print(f"The results are the same: {comparison}")

# 22. Question: Create a 3D array of shape (2, 1, 4) and a 2D array of shape (4, 1). Perform an element-wise operation using broadcasting and explain the 
# result. Use np. new axis to achieve the same result without broadcasting.
import numpy as np

# Step 1: Creating two large 2D arrays
A = np.random.rand(1000, 1000)
B = np.random.rand(1000, 1000)

# Step 2: Matrix multiplication using np.dot()
start_time_dot = time.time()
result_dot = np.dot(A, B)
end_time_dot = time.time()
time_dot = end_time_dot - start_time_dot
print(f"Time taken by np.dot(): {time_dot:.6f} seconds")


# Step 3: Matrix multiplication using @ operator
start_time_at = time.time()
result_at = A @ B
end_time_at = time.time()
time_at = end_time_at - start_time_at
print(f"Time taken by @ operator: {time_at:.6f} seconds")


# Step 4: Comparing the results
comparison = np.allclose(result_dot, result_at)
print(f"The results are the same: {comparison}")


import numpy as np
x = np.random.randint(10,size = (2,1,4))
y = np.array([[1],[2],[3],[56]])
result = x + y.T
print(result)
import numpy as np
x = np.random.randint(10,size = (2,1,4))
y = np.array([[1],[2],[3],[56]])
result = x + y.T
print(result)

# 23. Generate a 2D array of random floats between 0 and 1. Use conditional operators to create a Boolean mask for values less than 0.5. Replace these 
# values with their squares and leave the rest unchanged.
x = np.random.rand(5)
print(x)

mask = x<0.5
print(mask)

x[mask] = x[mask]**2
print(x)

# 24. Given a 5x5 array of sequential integers, use slicing to: 
# o Extract the diagonal elements 
# o Replace the elements of the middle row with zeros 
# o Flip the array vertically and horizontally 
import numpy as np

# Step 1: Create a 5x5 array of sequential integers
array = np.arange(1, 26).reshape(5, 5)
print("Original array:")
print(array)

# Step 2: Extract the diagonal elements
diagonal_elements = np.diagonal(array)
print("\nDiagonal elements:")
print(diagonal_elements)

# Step 3: Replace the elements of the middle row with zeros
array[2, :] = 0
print("\nArray with middle row replaced by zeros:")
print(array)

# Step 4: Flip the array vertically and horizontally
flipped_array = array[::-1, ::-1]
print("\nFlipped array (vertically and horizontally):")
print(flipped_array)

# 25.Create a 4D array of shape (2, 3, 4, 5) with random integers. Use advanced slicing to extract a subarray and compute the mean along a specified axis.
x  = np.random.randint(50 , size =(2,3,4,5))
print(x)
y = x[1][1][ :, 0:3]
print(y)
z = np.mean(y, axis= 1)
print(z)

# 26.  Given an array of shape (10, 20), reshape it to (20, 10) and (5, 40). Discuss the impact on the array's shape, size, and dimensionality. 
import numpy as np

# Step 1: Create a 10*20 array
original_array = np.arange(200).reshape(10, 20)
print("Original array shape (10, 20):")
print(original_array)

# Step 2: Reshape to 20*10
reshaped_array_20_10 = original_array.reshape(20, 10)
print("\nReshaped array shape (20, 10):")
print(reshaped_array_20_10)

# Step 3: Reshape to 5*40
reshaped_array_5_40 = original_array.reshape(5, 40)
print("\nReshaped array shape (5, 40):")
print(reshaped_array_5_40)

# 27. Generate a large 2D array and demonstrate the use of np. reshape () and unravel () to manipulate its shape for various linear algebra operations.
import numpy as np


array = np.arange(36).reshape(6, 6)
print("Original array (6, 6):")
print(array)


reshaped_array = array.reshape(3, 12)
print("\nReshaped array (3, 12):")
print(reshaped_array)

flattened_array = reshaped_array.ravel()
print("\nFlattened array:")
print(flattened_array)

# 28. Question: Given a 6*6 matrix, use advanced indexing and slicing to extract the upper triangular part of the matrix and set the lower
# triangular part to zero. Verify the result. 
import numpy as np

matrix = np.random.randint(1, 20, (6, 6))
print("Original matrix:")
print(matrix)

upper_triangular = np.triu(matrix)
print("\nUpper triangular part of the matrix with lower part set to zero:")
print(upper_triangular)

